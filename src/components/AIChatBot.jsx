import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

function AIChatBot() {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [showQuickReplies, setShowQuickReplies] = useState(true);
  const messagesEndRef = useRef(null);

  // Base de conocimientos del bot
  const knowledgeBase = {
    greetings: [
      "¬°Hola! Soy el asistente virtual de Mariano Aliandri. ¬øEn qu√© puedo ayudarte hoy?",
      "¬°Hola! ¬øC√≥mo puedo asistirte con tus necesidades de an√°lisis de datos?",
      "¬°Bienvenido! Estoy aqu√≠ para ayudarte con cualquier consulta sobre nuestros servicios."
    ],
    services: {
      'an√°lisis de datos': 'Ofrezco servicios completos de an√°lisis de datos incluyendo: limpieza y procesamiento de datos, creaci√≥n de dashboards interactivos, an√°lisis predictivo, y reportes automatizados. ¬øTe interesa alg√∫n √°rea espec√≠fica?',
      'power bi': 'Soy especialista en Power BI. Puedo ayudarte con: creaci√≥n de dashboards profesionales, modelado de datos, DAX avanzado, integraci√≥n con m√∫ltiples fuentes de datos, y capacitaci√≥n para tu equipo.',
      'excel': 'Ofrezco servicios avanzados de Excel: automatizaci√≥n con macros, Power Query para ETL, Power Pivot para an√°lisis multidimensional, y dashboards din√°micos.',
      'consultor√≠a': 'Proporciono consultor√≠a estrat√©gica en inteligencia empresarial: auditor√≠a de procesos actuales, dise√±o de arquitectura de datos, KPIs y m√©tricas, y roadmap de implementaci√≥n.',
      'python': 'Desarrollo soluciones en Python para: web scraping, automatizaci√≥n de procesos, an√°lisis estad√≠stico avanzado, machine learning, y APIs para integraci√≥n de datos.'
    },
    pricing: 'Los precios var√≠an seg√∫n el alcance del proyecto. Ofrezco: Consulta inicial gratuita (1 hora), proyectos desde $500 USD, retainer mensual desde $1,500 USD. ¬øTe gustar√≠a una cotizaci√≥n personalizada?',
    process: 'Mi proceso de trabajo incluye: 1) Consulta inicial gratuita, 2) An√°lisis de necesidades, 3) Propuesta detallada, 4) Desarrollo e implementaci√≥n, 5) Capacitaci√≥n y soporte. Todo con comunicaci√≥n constante.',
    contact: 'Puedes contactarme por: WhatsApp: +54 299 541-4422, Email: marianoaliandri@gmail.com, o directamente desde este chat. ¬øCu√°l prefieres?',
    scheduling: 'Para agendar una reuni√≥n, puedes: usar el bot√≥n "Agendar Reuni√≥n" que aparecer√°, enviarme un WhatsApp, o decirme tu disponibilidad y yo te propongo horarios.',
    experience: 'Tengo amplia experiencia en an√°lisis de datos e inteligencia empresarial, especializado en Power BI, Excel avanzado, Python, y web scraping. He trabajado con empresas de diversos sectores ayud√°ndoles a optimizar sus procesos con datos.'
  };

  const quickReplies = [
    { text: "¬øQu√© servicios ofreces?", key: "services" },
    { text: "Precios y cotizaciones", key: "pricing" },
    { text: "Agendar reuni√≥n", key: "meeting" },
    { text: "Proceso de trabajo", key: "process" },
    { text: "Power BI", key: "powerbi" },
    { text: "Contacto", key: "contact" }
  ];

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      // Mensaje de bienvenida
      setTimeout(() => {
        addBotMessage(knowledgeBase.greetings[0]);
      }, 500);
    }
  }, [isOpen]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const addBotMessage = (text) => {
    setMessages(prev => [...prev, {
      id: Date.now(),
      text,
      isBot: true,
      timestamp: new Date()
    }]);
  };

  const addUserMessage = (text) => {
    setMessages(prev => [...prev, {
      id: Date.now(),
      text,
      isBot: false,
      timestamp: new Date()
    }]);
  };

  const simulateTyping = (duration = 1500) => {
    setIsTyping(true);
    return new Promise(resolve => {
      setTimeout(() => {
        setIsTyping(false);
        resolve();
      }, duration);
    });
  };

  const getResponse = (userInput) => {
    const input = userInput.toLowerCase();
    
    // Saludos
    if (input.match(/(hola|hello|hi|buenos d√≠as|buenas tardes|buenas noches)/)) {
      return knowledgeBase.greetings[Math.floor(Math.random() * knowledgeBase.greetings.length)];
    }
    
    // Servicios espec√≠ficos
    for (const [key, response] of Object.entries(knowledgeBase.services)) {
      if (input.includes(key) || input.includes(key.replace(' ', ''))) {
        return response;
      }
    }
    
    // Precios
    if (input.match(/(precio|costo|cotizaci√≥n|presupuesto|cu√°nto|tarifa)/)) {
      return knowledgeBase.pricing;
    }
    
    // Proceso
    if (input.match(/(proceso|c√≥mo trabajas|metodolog√≠a|pasos)/)) {
      return knowledgeBase.process;
    }
    
    // Contacto
    if (input.match(/(contacto|tel√©fono|email|whatsapp|llamar)/)) {
      return knowledgeBase.contact;
    }
    
    // Reuni√≥n/Agenda
    if (input.match(/(reuni√≥n|cita|agendar|meeting|horario|disponibilidad)/)) {
      return knowledgeBase.scheduling;
    }
    
    // Experiencia
    if (input.match(/(experiencia|portfolio|trabajos|proyectos|clientes)/)) {
      return knowledgeBase.experience;
    }
    
    // Agradecimientos
    if (input.match(/(gracias|thank you|perfecto|excelente|genial)/)) {
      return '¬°De nada! ¬øHay algo m√°s en lo que pueda ayudarte? Estoy aqu√≠ para resolver todas tus dudas sobre an√°lisis de datos.';
    }
    
    // Despedidas
    if (input.match(/(adi√≥s|bye|nos vemos|hasta luego|chau)/)) {
      return '¬°Hasta luego! No dudes en contactarme cuando necesites ayuda con an√°lisis de datos. ¬°Que tengas un excelente d√≠a!';
    }
    
    // Respuesta por defecto con sugerencias
    return `Entiendo que preguntas sobre "${userInput}". Te puedo ayudar con:\n\n‚Ä¢ An√°lisis de datos y Power BI\n‚Ä¢ Consultor√≠a en inteligencia empresarial\n‚Ä¢ Automatizaci√≥n con Python y Excel\n‚Ä¢ Precios y cotizaciones\n‚Ä¢ Agendar una reuni√≥n gratuita\n\n¬øSobre cu√°l te gustar√≠a saber m√°s?`;
  };

  const handleSendMessage = async (message = inputValue) => {
    if (!message.trim()) return;

    // Agregar mensaje del usuario
    addUserMessage(message);
    setInputValue('');
    setShowQuickReplies(false);

    // Simular escritura del bot
    await simulateTyping();

    // Obtener y enviar respuesta
    const response = getResponse(message);
    addBotMessage(response);

    // Mostrar botones especiales seg√∫n el contexto
    if (message.toLowerCase().includes('reuni√≥n') || message.toLowerCase().includes('agendar')) {
      setTimeout(() => {
        addBotMessage('üëÜ Puedes usar el bot√≥n de arriba para agendar directamente, o dime tu disponibilidad y coordino contigo.');
      }, 1000);
    }
  };

  const handleQuickReply = (reply) => {
    handleSendMessage(reply.text);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const openCalendar = () => {
    window.open('https://calendly.com/marianoaliandri', '_blank');
  };

  const openWhatsApp = () => {
    const message = encodeURIComponent('Hola Mariano! Vengo del chat de tu web y me gustar√≠a agendar una reuni√≥n para hablar sobre an√°lisis de datos.');
    window.open(`https://wa.me/+542995414422?text=${message}`, '_blank');
  };

  return (
    <>
     {/* Bot√≥n flotante del chat */}
<motion.button
  onClick={() => setIsOpen(!isOpen)}
  className={`fixed top-1/2 right-6 z-40 w-14 h-14 rounded-full shadow-lg transition-all duration-300 flex items-center justify-center transform -translate-y-1/2 ${
    isOpen ? 'bg-red-500 hover:bg-red-600' : 'bg-blue-600 hover:bg-blue-700'
  }`}
  whileHover={{ scale: 1.1 }}
  whileTap={{ scale: 0.9 }}
  initial={{ opacity: 0, scale: 0 }}
  animate={{ opacity: 1, scale: 1 }}
  transition={{ duration: 0.5, delay: 2 }}
>
  <motion.div
    animate={{ rotate: isOpen ? 180 : 0 }}
    transition={{ duration: 0.3 }}
  >
    {isOpen ? (
      <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
      </svg>
    ) : (
      <svg className="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
        <path d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
      </svg>
    )}
  </motion.div>
        
        {/* Indicador de mensajes nuevos */}
        {!isOpen && (
          <motion.div
            className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full flex items-center justify-center"
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ delay: 3 }}
          >
            <span className="text-xs text-white font-bold">!</span>
          </motion.div>
        )}
      </motion.button>

      {/* Chat window */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="fixed bottom-36 right-6 z-40 w-96 h-[500px] bg-white dark:bg-gray-800 rounded-2xl shadow-2xl border border-gray-200 dark:border-gray-700 flex flex-col overflow-hidden"
            initial={{ opacity: 0, y: 100, scale: 0.8 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 100, scale: 0.8 }}
            transition={{ duration: 0.3 }}
          >
            {/* Header */}
            <div className="bg-gradient-to-r from-blue-600 to-blue-700 text-white p-4 flex items-center gap-3">
              <div className="w-10 h-10 bg-white bg-opacity-20 rounded-full flex items-center justify-center">
                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                </svg>
              </div>
              <div className="flex-1">
                <h3 className="font-semibold">Asistente IA</h3>
                <p className="text-xs text-blue-100">
                  {isTyping ? 'Escribiendo...' : 'En l√≠nea ‚Ä¢ Responde en segundos'}
                </p>
              </div>
              <div className="flex gap-2">
                <motion.button
                  onClick={openCalendar}
                  className="p-2 bg-white bg-opacity-20 rounded-lg hover:bg-opacity-30 transition-colors"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  title="Agendar reuni√≥n"
                >
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/>
                  </svg>
                </motion.button>
                <motion.button
                  onClick={openWhatsApp}
                  className="p-2 bg-white bg-opacity-20 rounded-lg hover:bg-opacity-30 transition-colors"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  title="WhatsApp"
                >
                  <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.106"/>
                  </svg>
                </motion.button>
              </div>
            </div>

            {/* Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  className={`flex ${message.isBot ? 'justify-start' : 'justify-end'}`}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  <div className={`max-w-[80%] p-3 rounded-2xl ${
                    message.isBot
                      ? 'bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-gray-100'
                      : 'bg-blue-600 text-white'
                  }`}>
                    <p className="text-sm whitespace-pre-line">{message.text}</p>
                    <span className={`text-xs mt-1 block ${
                      message.isBot ? 'text-gray-500 dark:text-gray-400' : 'text-blue-100'
                    }`}>
                      {message.timestamp.toLocaleTimeString('es-ES', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </span>
                  </div>
                </motion.div>
              ))}

              {/* Typing indicator */}
              {isTyping && (
                <motion.div
                  className="flex justify-start"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                >
                  <div className="bg-gray-100 dark:bg-gray-700 p-3 rounded-2xl">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </motion.div>
              )}

              {/* Quick replies */}
              {showQuickReplies && messages.length <= 1 && (
                <motion.div
                  className="space-y-2"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ delay: 1 }}
                >
                  <p className="text-xs text-gray-500 dark:text-gray-400 text-center">
                    Respuestas r√°pidas:
                  </p>
                  <div className="grid grid-cols-2 gap-2">
                    {quickReplies.map((reply, index) => (
                      <motion.button
                        key={reply.key}
                        onClick={() => handleQuickReply(reply)}
                        className="p-2 text-xs bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/40 transition-colors"
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: 1.2 + index * 0.1 }}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        {reply.text}
                      </motion.button>
                    ))}
                  </div>
                </motion.div>
              )}

              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className="p-4 border-t border-gray-200 dark:border-gray-700">
              <div className="flex gap-2">
                <input
                  type="text"
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Escribe tu mensaje..."
                  className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:text-white text-sm"
                  disabled={isTyping}
                />
                <motion.button
                  onClick={() => handleSendMessage()}
                  disabled={!inputValue.trim() || isTyping}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  whileHover={{ scale: inputValue.trim() && !isTyping ? 1.05 : 1 }}
                  whileTap={{ scale: inputValue.trim() && !isTyping ? 0.95 : 1 }}
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                  </svg>
                </motion.button>
              </div>
              <p className="text-xs text-gray-500 dark:text-gray-400 mt-2 text-center">
                Presiona Enter para enviar ‚Ä¢ Powered by IA
              </p>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}

export default AIChatBot;